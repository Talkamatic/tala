import codecs

PREDICATES_FILE =  "/predicates_file.xml"
ACTIONS_FILE =  "/actions_file.xml"
BASE_GRAMMAR_SV = "/base_grammar_sv.py"

GRAMMAR_OUTPUT_FILE = "/grammar/grammar_sv.py"
ONTOLOGY_OUTPUT_FILE =  "/ontology.xml"

GENERATED_FILE_HEADER = """#-*- coding: utf-8 -*-

# Copyright 2015 Talkamatic AB

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


################################################################################
#              DO NOT EDIT THIS FILE DIRECTLY! IT IS GENERATED!                #
################################################################################

"""


class XMLGenerator:
    def __init__(self, domain):
        self.domain = domain
        self._generate_ontology()
        self._generate_grammar()

    def _generate_ontology(self):
        print "generating ontology.xml ..."
        with open(self.domain + ONTOLOGY_OUTPUT_FILE, "w") as f:
            self.ontology_file = f
            self._print_ontology_header()
            self._print_ontology_body()
            self._print_ontology_footer()
        print "Done."

    def _create_ontology_resources_from_api(self):
        self.builder.create_individual_definitions()
        self.builder.create_sorts_definitions()
        self.builder.create_grammar_definitions()

    def _print_ontology_header(self):
        self.ontology_file.write('<ontology name="%sOntology">\n' % self.domain)
    
    def _print_ontology_body(self):
        self._print_sorts()
        self._print_predicates()
        self._print_actions()
        self._print_individuals()

    def _print_sorts(self):
        sorts = self.get_sorts()
        for sort in sorts:
            self.ontology_file.write('  <sort name="%s"/>\n' % sort)

    def get_sorts(self):
        raise NotImplementedError(
            "method XMLGenerator.get_sorts(self) must be overridden.")
        

    def _print_individuals(self):
        individuals = self.get_individuals()
        for individual in individuals:
            self.ontology_file.write('  <individual name="%s" sort="%s"/>\n' % (
                individual["name"], individual["sort"]))

    def get_individuals(self):
        raise NotImplementedError(
            "method XMLGenerator.get_individuals(self) must be overridden.")


    def _print_predicates(self):
        with open(self.domain + PREDICATES_FILE, "r") as f:
            self.predicates_file = f
            self._print_predicates_from_file()

    def _print_predicates_from_file(self):
        for line in self.predicates_file:
            self.ontology_file.write("  " + line)

    def _print_actions(self):
        with open(self.domain + ACTIONS_FILE, "r") as f:
            self.actions_file = f
            self._print_actions_from_file()

    def _print_actions_from_file(self):
        for line in self.actions_file:
            self.ontology_file.write("  " + line)

    def _print_ontology_footer(self):
        self.ontology_file.write('</ontology>\n')

    def _close_ontology_file(self):
        self.ontology_file.close()

    def _generate_grammar(self):
        print "generating grammar.xml ..."
        self.grammar_file = codecs.open(self.domain + GRAMMAR_OUTPUT_FILE, "w", "utf-8")
        self._print_grammar_file_header()
        self._print_base_grammar()
        self._print_generated_grammar_resources()
        self.grammar_file.close()
        print "Done."
        
    def _print_grammar_file_header(self):
        self.grammar_file.write(GENERATED_FILE_HEADER)

    def _print_base_grammar(self):
        self.base_grammar_file = codecs.open(self.domain + BASE_GRAMMAR_SV, "r", "utf-8")
        self._print_grammar_lines_from_base_grammar()
        self.base_grammar_file.close()
        
    def _print_grammar_lines_from_base_grammar(self):
        for line in self.base_grammar_file:
            self.grammar_file.write(line)

    def _print_generated_grammar_resources(self):
        for grammar_entry in self.get_grammar_entries():
            python_entry = self._create_python_grammar_entry_from(grammar_entry)
            self.grammar_file.write(python_entry)
            
    def get_grammar_entries(self):
        raise NotImplementedError(
            "method XMLGenerator.get_grammar_entries(self) must be overridden.")


    def _create_grammar_entry(self, id, prefix, name):
        individual = "%s_%s" % (prefix, id)
        if prefix == "channelid":
            grammar_entry =  {"individual": individual,
                              "grammar_name": ["kanal " + name, name]}
        else:
            grammar_entry =  {"individual": individual,
                              "grammar_name": [name]}

        return grammar_entry


    def _create_python_grammar_entry_from(self, entry):
        grammar_names_string = self._create_grammar_names_string(
            entry["grammar_name"])
        return "%s = [%s]\n" % (entry["individual"], grammar_names_string)
    
    def _create_grammar_names_string(self, names_list):
        string = ""
        for name in names_list:
            string = string + 'u"%s", ' % name
        return string
    

