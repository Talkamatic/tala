pipeline {
    agent none

    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '10'
            )
        )
        timestamps()
        timeout(time: 5, unit: 'MINUTES')
    }

    triggers {
        gerrit(
            customUrl: '',
            gerritProjects:[
                [
                    branches: [
                        [
                            compareType: 'ANT',
                            pattern: 'master'
                        ]
                    ],
                    compareType: 'PLAIN',
                    disableStrictForbiddenFileVerification: false,
                    pattern: 'tala'
                ]
            ],
            serverName: 'Talkamatic',
            triggerOnEvents: [
                changeMerged()
            ],
            skipVote: [
              onSuccessful: false,
              onFailed    : false,
              onUnstable  : false,
              onNotBuilt  : false
            ]
        )
    }

    stages {
        stage('checkout') {
            agent any
            steps {
                sh "rm -rf *"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [
                            $class: 'RelativeTargetDirectory',
                            relativeTargetDir: 'tala'
                        ],
                        [
                            $class: 'SubmoduleOption',
                            disableSubmodules: false,
                            parentCredentials: true
                        ]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'jenkinsatgerrit',
                        url: 'ssh://jenkins@gerrit.talkamatic.se:29418/tala'
                    ]]
                ])
                dir("tala") {
                    script {
                        env.COMMIT_TO_RELEASE = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    }
                    stash includes: '**', name: 'tala'
                }
            }
        }

        stage('build wheel') {
            agent {
                dockerfile {
                    filename 'Dockerfile-dev'
                }
            }
            steps {
                sh "rm -rf *"
                unstash 'tala'
                sh "pip wheel --wheel-dir dist --no-deps ."
                dir("dist") {
                    stash includes: 'tala*.whl', name: 'wheel'
                    archiveArtifacts 'tala*.whl'
                }
            }
        }

        stage ('freeze requirements') {
            agent {
                docker {
                    image 'python:2.7-slim'
                    args  '-u root'
                }
            }
            steps {
                sh "rm -rf *.whl requirements.txt"
                unstash 'wheel'
                sh "pip install tala*.whl"
                sh "pip uninstall -y tala"
                sh "pip freeze --local > requirements.txt"
                stash includes: 'requirements.txt', name: 'requirements'
                archiveArtifacts 'requirements.txt'
            }
        }

        stage('build master') {
            agent { label 'docker' }
            steps {
                sh "rm -rf *.whl requirements.txt"
                unstash 'wheel'
                unstash 'requirements'
                sh "docker build . -t talkamatic/tala:${env.COMMIT_TO_RELEASE}"
                sh "docker tag talkamatic/tala:${env.COMMIT_TO_RELEASE} talkamatic/tala:master"
            }
        }

        stage('push master') {
            agent { label 'docker' }
            steps {
                withCredentials([[$class: 'StringBinding', credentialsId: 'dockerhubcred', variable: 'pw']]) {
                    sh "echo ${pw} | docker login -u zigit --password-stdin"
                }
                sh "docker push talkamatic/tala:${env.COMMIT_TO_RELEASE}"
                sh "docker push talkamatic/tala:master"
            }
        }

        stage('test') {
            agent {
                dockerfile {
                    filename 'Dockerfile-dev'
                }
            }
            steps {
                sh "rm -rf *"
                unstash 'tala'
                sh "python setup.py build"
                sh "flake8 ."
                sh "pylint tala"
                sh "py.test tala"
                sh "py.test integration_tests"
            }
        }

        stage('push candidate') {
            agent { label 'docker' }
            steps {
                withCredentials([[$class: 'StringBinding', credentialsId: 'dockerhubcred', variable: 'pw']]) {
                    sh "echo ${pw} | docker login -u zigit --password-stdin"
                }
                sh "docker tag talkamatic/tala:${env.COMMIT_TO_RELEASE} talkamatic/tala:candidate"
                sh "docker push talkamatic/tala:candidate"
            }
        }
    }
}
